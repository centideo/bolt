# Main CMakeList.txt
# Minimum CMake version 2.6
# 
# category 			CMakeList Files
# package 			MAIN_DIR/Casablanca
# author			Gamunu Bandara
# copyright 		All rights reserved
# version 1.0.0 	{Version Major.Version Minor.Version Patch}
# Last Updated 		23.2.2014 02:20
# TODO: Find a way to add precompiled headers


CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

SET(CMAKE_CONFIGURATION_TYPES ${CMAKE_BUILD_TYPE} CACHE STRING "" FORCE)

# about this project
# ------------------
project(casablanca)
SET(VERSION_MAJOR "1")
SET(VERSION_MINOR "0")
SET(VERSION_PATCH "0")
SET(VERSION "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}")


IF(UNIX) # This includes OSX
  FIND_PACKAGE(Boost REQUIRED COMPONENTS random chrono system thread locale regex filesystem)
  FIND_PACKAGE(Threads REQUIRED)
  IF(APPLE AND NOT OPENSSL_ROOT_DIR)
    # Prefer a homebrew version of OpenSSL over the one in /usr/lib
    FILE(GLOB OPENSSL_ROOT_DIR /usr/local/Cellar/openssl/*)
    # Prefer the latest (make the latest one first)
    LIST(REVERSE OPENSSL_ROOT_DIR)
  endif()
  # This should prevent linking against the system provided 0.9.8y
  FIND_PACKAGE(OpenSSL 1.0.0 REQUIRED)
elseif(WIN32)
  ADD_DEFINITIONS(-DUNICODE)
else()
  MESSAGE(FATAL_ERROR "-- Unsupported Build Platform.")
endif()

IF(("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang") OR IOS)
  message("-- Setting clang options")

  set(WARNINGS "-Wall -Wextra -Wcast-qual -Wconversion -Wformat=2 -Winit-self -Winvalid-pch -Wmissing-format-attribute -Wmissing-include-dirs -Wpacked -Wredundant-decls")
  set(OSX_SUPPRESSIONS "-Wno-overloaded-virtual -Wno-sign-conversion -Wno-deprecated -Wno-unknown-pragmas -Wno-reorder -Wno-char-subscripts -Wno-switch -Wno-unused-parameter -Wno-unused-variable -Wno-deprecated -Wno-unused-value -Wno-unknown-warning-option -Wno-return-type-c-linkage -Wno-unused-function -Wno-sign-compare -Wno-shorten-64-to-32 -Wno-reorder")
  set(WARNINGS "${WARNINGS} ${OSX_SUPPRESSIONS}")

  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++ -Wno-return-type-c-linkage -Wno-unneeded-internal-declaration")
  set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY "libc++")
  set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD "c++11")

  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -fno-strict-aliasing")
ELSEIF("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU")
  message("-- Setting gcc options")

  set(WARNINGS "-Wall -Wextra -Wunused-parameter -Wcast-align -Wcast-qual -Wconversion -Wformat=2 -Winit-self -Winvalid-pch -Wmissing-format-attribute -Wmissing-include-dirs -Wpacked -Wredundant-decls -Wunreachable-code")
  set(LINUX_SUPPRESSIONS "-Wno-deprecated -Wno-unknown-pragmas -Wno-reorder -Wno-unused-function -Wno-char-subscripts -Wno-switch -Wno-unused-but-set-parameter -Wno-unused-value -Wno-unused-local-typedefs")

  set(WARNINGS "${WARNINGS} ${LINUX_SUPPRESSIONS}")
  set(LD_FLAGS "${LD_FLAGS} -Wl,-z,defs")

  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -fno-strict-aliasing")
else()
  message("-- Unknown compiler, success is doubtful.")
endif()

# Include additonal linclude directories
INCLUDE_DIRECTORIES( include src/pch )

# Source files list
IF(UNIX)
    set(SOURCES
    src/streams/linux/fileio_linux.cpp
    src/json/json.cpp
    src/json/json_parsing.cpp
    src/json/json_serialization.cpp
    src/utilities/asyncrt_utils.cpp
    src/pplx/pplx.cpp
    src/pplx/threadpool.cpp
    src/uri/uri.cpp
    src/uri/uri_builder.cpp
    src/uri/uri_parser.cpp
    src/http/common/http_msg.cpp
    src/http/common/http_helpers.cpp
    src/http/client/http_msg_client.cpp
    src/http/client/http_linux.cpp
    src/http/client/x509_cert_utilities.cpp
    src/http/listener/http_linux_server.cpp
    src/http/listener/http_listener.cpp
    src/http/listener/http_msg_listen.cpp
    src/http/listener/http_server_api.cpp
    src/http/oauth/oauth1.cpp
    src/http/oauth/oauth2.cpp
   # src/websockets/client/ws_msg.cpp
   # src/websockets/client/ws_client.cpp
    src/utilities/base64.cpp
    )
  if(APPLE)
    set(SOURCES ${SOURCES} src/pplx/apple/pplxapple.cpp)
    find_library(COREFOUNDATION CoreFoundation "/")
    find_library(SECURITY Security "/")
    set(EXTRALINKS ${COREFOUNDATION} ${SECURITY})
  else()
    set(SOURCES ${SOURCES} src/pplx/linux/pplxlinux.cpp)
  endif()
ELSEIF(WIN32)
set(SOURCES
    src/json/json.cpp
    src/json/json_parsing.cpp
    src/json/json_serialization.cpp
    src/utilities/asyncrt_utils.cpp
    src/uri/uri.cpp
    src/uri/uri_builder.cpp
    src/uri/uri_parser.cpp
    src/http/common/http_msg.cpp
    src/http/common/http_helpers.cpp
    src/http/client/http_msg_client.cpp
    src/http/client/x509_cert_utilities.cpp
    src/http/listener/http_listener.cpp
    src/http/listener/http_msg_listen.cpp
    src/http/listener/http_server_api.cpp
    src/websockets/client/ws_msg.cpp
    src/websockets/client/ws_client.cpp
    src/utilities/base64.cpp
    src/http/client/http_win7.cpp
    src/http/listener/http_windows_server.cpp
    src/http/oauth/oauth1.cpp
    src/streams/windows/fileio.cpp
    src/streams/windows/ioscheduler.cpp
    src/utilities/dllmain.cpp
    )

# Add definitions
ADD_DEFINITIONS (
    -D_ASYNCRT_EXPORT
    -D_PPLX_EXPORT
    -D_MBCS
    -D_USRDLL
    )

set(EXTRALINKS Httpapi.lib Winhttp.dll)
ENDIF()
# build library

ADD_LIBRARY(casablanca SHARED ${SOURCES})


target_link_libraries(casablanca
  ${CMAKE_THREAD_LIBS_INIT}
  ${Boost_SYSTEM_LIBRARY}
  ${Boost_THREAD_LIBRARY}
  ${Boost_ATOMIC_LIBRARY}
  ${Boost_CHRONO_LIBRARY}
  ${Boost_LOCALE_LIBRARY}
  ${Boost_RANDOM_LIBRARY}
  ${EXTRALINKS}
  ${Boost_FRAMEWORK}
  ${OPENSSL_LIBRARIES}
  ${COREFOUNDATION}
  )
